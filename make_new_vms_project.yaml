heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying two servers into the new network. The template also
  assigns floating IP addresses to each server so they are routable from the
  public network.

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers  
  name1:
    type: string
    description: name of first server
  name2:
    type: string
    description: name of second server
  name3:
    type: string
    description: name of the third server
  image:
    type: string
    description: Name of image to use for first server
  image2:
   type: string 
   description: Name of the image to use for second server  
  image3:
   type: string 
   description: Name of the image to use for third server
  flavor:
    type: string
    description: Flavor to use for first server
  flavor2:
    type: string
    description: Flavor to use for second server
  flavor3:
    type: string
    description: Flavor to use for third server
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
  security_name1:
    type: comma_delimited_list
    description: name of security group for server one
  security_name2:
    type: comma_delimited_list
    description: name of security group for server two
  security_name3:
    type: comma_delimited_list
    description: name of security group for server three


resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  server1:
    type: OS::Nova::Server
    properties:
      name: {get_param: name1 }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server1_port }
      user_data_format: RAW
      user_data:
        get_file: boot_script.sh

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: { get_param: security_name1 }

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server1_port }

  server2:
    type: OS::Nova::Server
    properties:
      name: { get_param: name2 }
      image: { get_param: image2 }
      flavor: { get_param: flavor2 }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server2_port }
      user_data_format: RAW
      user_data:
        get_file: boot_script.sh

  server2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: {get_param: security_name2 }

  server2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server2_port }

  server3:
    type: OS::Nova::Server
    properties:
      name: { get_param: name3 }
      image: { get_param: image3 }
      flavor: { get_param: flavor3 }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server3_port }
      user_data_format: RAW
      user_data:
        get_file: boot_script.sh

  server3_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: {get_param: security_name3 }

  server3_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server3_port }

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
  server2_public_ip:
    description: Floating IP address of server2 in public network
    value: { get_attr: [ server2_floating_ip, floating_ip_address ] }
  server3_private_ip:
    description: IP address of server3 in private network
    value: { get_attr: [ server3, first_address ] }
  server3_public_ip:
    description: Floating IP address of server3 in public network
    value: { get_attr: [ server3_floating_ip, floating_ip_address ] }
